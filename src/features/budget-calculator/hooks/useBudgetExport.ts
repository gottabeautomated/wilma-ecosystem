import { useState } from "react";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import type { BudgetResult, BudgetFormData } from "../types/budget.types";

export function useBudgetExport() {
  const [isExporting, setIsExporting] = useState(false);
  
  // Format currency
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      maximumFractionDigits: 0
    }).format(amount);
  };
  
  // Format date
  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('en-US', {
      month: 'long',
      day: 'numeric',
      year: 'numeric'
    }).format(date);
  };
  
  // Export budget results to PDF
  const exportToPDF = async (
    resultRef: React.RefObject<HTMLDivElement>,
    result: BudgetResult,
    formData: BudgetFormData,
    fileName: string = "wedding-budget"
  ) => {
    if (!resultRef.current) return;
    
    setIsExporting(true);
    
    try {
      // Create a new PDF
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });
      
      // Set basic PDF properties
      pdf.setProperties({
        title: 'Wedding Budget Plan',
        subject: 'Personalized Wedding Budget',
        author: 'Wilma MK2',
        keywords: 'wedding, budget, planning'
      });
      
      // Capture the result component as an image
      const canvas = await html2canvas(resultRef.current, {
        scale: 2,
        logging: false,
        useCORS: true,
        allowTaint: true
      });
      
      // Get canvas dimensions
      const imgWidth = 210; // A4 width in mm
      const imgHeight = canvas.height * imgWidth / canvas.width;
      
      // Add image to PDF
      const imgData = canvas.toDataURL('image/png');
      pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
      
      // Add additional information
      let yPosition = imgHeight + 10;
      
      // Add summary section
      pdf.setFontSize(16);
      pdf.setTextColor(60, 60, 100);
      pdf.text('Your Wedding Budget Summary', 105, yPosition, { align: 'center' });
      
      yPosition += 10;
      
      // Add basic information
      pdf.setFontSize(10);
      pdf.setTextColor(80, 80, 80);
      
      // Get partner names if available
      const coupleNames = formData.partnerNames.filter(Boolean).join(" & ");
      
      if (coupleNames) {
        pdf.text(`Prepared for: ${coupleNames}`, 20, yPosition);
        yPosition += 6;
      }
      
      pdf.text(`Wedding Date: ${formatDate(formData.weddingDate)}`, 20, yPosition);
      yPosition += 6;
      
      pdf.text(`Location: ${formData.location}`, 20, yPosition);
      yPosition += 6;
      
      pdf.text(`Guest Count: ${formData.guestCount}`, 20, yPosition);
      yPosition += 6;
      
      pdf.text(`Wedding Style: ${formData.style.charAt(0).toUpperCase() + formData.style.slice(1)}`, 20, yPosition);
      yPosition += 6;
      
      pdf.text(`Total Budget: ${formatCurrency(result.totalBudget)}`, 20, yPosition);
      yPosition += 6;
      
      // Add priority categories if available
      if (formData.priorities.length > 0) {
        pdf.text(`Priorities: ${formData.priorities.join(", ")}`, 20, yPosition);
        yPosition += 10;
      } else {
        yPosition += 4;
      }
      
      // Add a summary of category allocations
      pdf.setFontSize(12);
      pdf.setTextColor(60, 60, 100);
      pdf.text('Budget Allocation Breakdown', 20, yPosition);
      
      yPosition += 6;
      
      // Table headers
      pdf.setFontSize(9);
      pdf.setTextColor(100, 100, 100);
      pdf.text('Category', 20, yPosition);
      pdf.text('Amount', 120, yPosition);
      pdf.text('Percentage', 160, yPosition);
      
      yPosition += 4;
      
      // Draw a line
      pdf.setDrawColor(200, 200, 200);
      pdf.line(20, yPosition, 190, yPosition);
      
      yPosition += 4;
      
      // Table content
      pdf.setTextColor(60, 60, 60);
      result.categories.forEach(category => {
        pdf.text(category.category, 20, yPosition);
        pdf.text(formatCurrency(category.amount), 120, yPosition);
        pdf.text(`${category.percentage}%`, 160, yPosition);
        yPosition += 5;
      });
      
      // Add footer
      const pageCount = pdf.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.setTextColor(150, 150, 150);
        pdf.text(
          'Generated by Wilma MK2 Wedding Planner | wilma-mk2.com',
          105,
          pdf.internal.pageSize.height - 10,
          { align: 'center' }
        );
      }
      
      // Save the PDF
      pdf.save(`${fileName}.pdf`);
    } catch (error) {
      console.error('Error exporting to PDF:', error);
    } finally {
      setIsExporting(false);
    }
  };
  
  return {
    exportToPDF,
    isExporting
  };
}
